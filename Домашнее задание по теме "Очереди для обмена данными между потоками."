import threading
import time

class Table:
    def __init__(self, number):
        self.number = number
        self.is_busy = False
        self.lock = threading.Lock()

class Cafe:
    def __init__(self, tables):
        self.queue = []
        self.tables = tables
        self.customer_count = 0

    def customer_arrival(self):
        for i in range(1, 11):
            self.customer_count += 1
            print(f"Посетитель номер {self.customer_count} прибыл")
            self.serve_customer(self.customer_count)
            time.sleep(1)

    def serve_customer(self, customer):
        free_table = self.find_free_table()
        if free_table:
            print(f"Посетитель номер {customer} сел за стол {free_table.number}. (начало обслуживания)")
            self.start_serving_thread(customer, free_table)
        else:
            self.queue.append(customer)
            print(f"Посетитель номер {customer} ожидает свободный стол. (помещение в очередь)")

    def find_free_table(self):
        for table in self.tables:
            if not table.is_busy:
                return table
        return None

    def start_serving_thread(self, customer, table):
        thread = threading.Thread(target=self.serve_customer_thread, args=(customer, table))
        thread.daemon = True
        thread.start()

    def serve_customer_thread(self, customer, table):
        with table.lock:
            table.is_busy = True
            time.sleep(5)
            table.is_busy = False
            print(f"Посетитель номер {customer} покушал и ушёл. (конец обслуживания)")
        if self.queue:
            next_customer = self.queue.pop(0)
            self.serve_customer(next_customer)

if __name__ == "__main__":
    tables = [Table(i) for i in range(1, 4)]

cafe = Cafe(tables)


customer_arrival_thread = threading.Thread(target=cafe.customer_arrival)
customer_arrival_thread.start()

time.sleep(22)

customer_arrival_thread.join()
