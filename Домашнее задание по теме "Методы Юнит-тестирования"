import unittest

class Runner:
    def __init__(self, name, speed):
        self.name = name
        self.speed = speed
        self.distance = 0

    def eq(self, other):
        return self.name == other.name

    def run(self, distance):
        self.distance += self.speed * distance

    def walk(self, distance):
        self.distance += distance

class Tournament:
    def __init__(self, distance, runners):
        self.distance = distance
        self.runners = runners

    def start(self):
        results = {}
        for i, runner in enumerate(self.runners):
            runner.run(self.distance)
            results[runner.name] = runner.distance
        sorted_results = dict(sorted(results.items(), key=lambda item: item[1], reverse=True))
        return {i+1: runner for i, runner in enumerate(sorted_results)}

class TournamentTest(unittest.TestCase):
    all_results = {}

    @classmethod
    def setUpClass(cls):
        cls.all_results = {}

    def setUp(self):
        self.usain = Runner("Усэйн", 10)
        self.andrey = Runner("Андрей", 9)
        self.nik = Runner("Ник", 3)

    @classmethod
    def tearDownClass(cls):
        for key, value in cls.all_results.items():
            print(f"{key}: {value}")

    def test_usain_and_nik(self):
        tournament = Tournament(90, [self.usain, self.nik])
        results = tournament.start()
        self.assertTrue(results[1] == "Усэйн")
        self.assertTrue(results[2] == "Ник")
        self.all_results[1] = results

    def test_andrey_and_nik(self):
        tournament = Tournament(90, [self.andrey, self.nik])
        results = tournament.start()
        self.assertTrue(results[1] == "Андрей")
        self.assertTrue(results[2] == "Ник")
        self.all_results[2] = results

    def test_usain_andrey_and_nik(self):
        tournament = Tournament(90, [self.usain, self.andrey, self.nik])
        results = tournament.start()
        self.assertTrue(results[1] == "Усэйн")
        self.assertTrue(results[2] == "Андрей")
        self.assertTrue(results[3] == "Ник")
        self.all_results[3] = results

if __name__ == '__main__':
    unittest.main()
